---
title: "Data Standards"
---

:::{.callout-tip}

We have a [tool suite](software.qmd) that is designed to work with data from any
hub.

:::


[{{< fa compass-drafting >}} Model Tasks Schema](https://hubverse.io/en/latest/user-guide/hub-config.html#model-tasks-schema){.btn .btn-outline-dark .ms-auto}
[{{< fa bullseye >}} Target Data Formats](https://hubverse.io/en/latest/user-guide/target-data.html){.btn .btn-outline-dark .ms-auto}
[{{< fa file-circle-check>}} Model Output Formats](https://hubverse.io/en/latest/user-guide/model-output.html){.btn .btn-outline-dark .ms-auto}

The core of the hubverse are the **robust and flexible data standards** that
allow administrators to write **structured guidelines** for tabular model
output submissions that can be **easily validated, ensembled, and visualized**.

![The data standards for each hub are represented as configuration files defined by the hubverse schema. These configuration files are the source of truth for the hub](/includes/img/hub-data-config.png){alt='diagram showing hubverse-org/schemas pointing to both tasks.json and admin.json. tasks.json points to model output and target data with the label "data validation". admin.json points to a box that shows contact information, file formats, and data storage'}

## Example

In a simplified example from the [US CDC FluSight Forecasting
Challenge](https://github.com/cdcepi/FluSight-forecast-hub/), which provides
[instructions in the `model-output`
folder](https://github.com/cdcepi/FluSight-forecast-hub/tree/main/model-output#readme).

1. They ask modelers to submit _weekly_ _quantile outputs_ of _incident
influenza hospitalizations_ from nowcast predictions for the _horizons_ of the
previous week, the current week, and the next three weeks. The predictions
should be performed for one or more of the continental US and the 50 US states
and territories. All this information is encoded in [a structured configuration file](https://github.com/cdcepi/FluSight-forecast-hub/blob/c24e390459a1d2bf52771f6514920ba3d8dea347/hub-config/tasks.json#L157-L335).
2. Modeling teams who want to submit the outputs of their models can use [the
**submission template** from
`hubValidations`](https://hubverse.io/en/latest/user-guide/model-output.html#submission-template)
to get started and then [submit a pull
request](https://docs.github.com/articles/about-pull-requests) to the hub.
3. When the pull request is recieved, [hubValdations **automatically validates the submission**](https://hubverse-org.github.io/hubValidations/articles/validate-pr.html) and the model output is added to the hub
4. The hub administrator can create an ensemble
5. Downstream tools like [dashboards](https://hubverse.io/en/latest/user-guide/dashboards.html) can visualize the data


## How it works

Each hub starts with a file called `tasks.json` that defines [**model tasks**](https://hubverse.io/en/latest/user-guide/tasks.html) and **frequency of submission**. The structure of this file is defined by [the hubverse model tasks schema](https://hubverse.io/en/latest/user-guide/dashboards.html).

The `tasks.json` file is responsible for validation of all model submissions
and ensures that data are inter-operable.

A model task defines the expected content of a
tabular model submission against one or more modeling targets. It includes
three properties:

1. [**Task ID
   variables**](https://hubverse.io/en/latest/user-guide/tasks.html#usage-of-task-id-variables):
   a collection of variables and their expected values used for modeling
   efforts (for example: `target` (incident hospitalizations), `location`
   (Massachusettes), `reference_date` (2025-04-16), and `horizon` (-1))
2. [**Output
   types**](https://hubverse.io/en/latest/user-guide/tasks.html#output-types):
   The method modelers should use to summarize the results of their modeling
   efforts (for example: the `quantile` probabilities `0.01, 0.025, 0.5, 0.975,
   0.99`)
3. [**Target
   metadata**](https://hubverse.io/en/latest/user-guide/tasks.html#target-metadata):
   The caracteristics of the value modelers are trying to predict (for example,
   incident hospitalizations represent weekly step-ahead continuous count data)



```{mermaid}
sequenceDiagram
  actor Modeler
  participant Hub
  participant hubverse schema
  actor Admin
  rect aliceblue
      Admin->>Hub: define model tasks configuration
      note left of Admin: hubAdmin::create_config()
      hubverse schema->>Hub: validate configuration files
      note right of Hub: hubAdmin::validate_config()
  end
  rect ghostwhite
    Hub-->Modeler: Get submission template
    note right of Modeler: hubValidations::submission_tmpl()
    Modeler->>Hub: Submit model output
    note left of Hub: hubValidations::validate_pr()
    Hub->>Hub: validate model submission
  end
  Admin->>Hub: create ensembled model output
  note left of Admin: hubEnsembles::simple_ensemble()

```

